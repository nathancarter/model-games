// Generated by CoffeeScript 1.9.2
(function() {
  var Model, thisPageURL,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.And = function(a, b) {
    return ['And', a, b];
  };

  window.Or = function(a, b) {
    return ['Or', a, b];
  };

  window.Not = function(a) {
    return ['Not', a];
  };

  window.Implies = function(a, b) {
    return ['Implies', a, b];
  };

  window.Iff = function(a, b) {
    return ['Iff', a, b];
  };

  window.Forall = function(a, b) {
    return ['Forall', a, b];
  };

  window.Exists = function(a, b) {
    return ['Exists', a, b];
  };

  window.Model = Model = (function() {
    Model.prototype.allModels = [];

    function Model(name1, description, universe) {
      this.name = name1;
      this.description = description;
      this.universe = universe;
      Model.prototype.allModels.push(this);
      this.operators = [];
      this.constants = [];
      this.expressions = [];
    }

    Model.prototype.addOperator = function(latex, evaluate, precedence, explanation, exampleArgs) {
      var head;
      if (exampleArgs == null) {
        exampleArgs = ['x', 'y', 'z'];
      }
      this.operators.push({
        latex: latex,
        evaluate: evaluate,
        precedence: precedence,
        exampleArgs: exampleArgs,
        explanation: explanation
      });
      head = "op" + (this.operators.length - 1);
      return function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return [head].concat(slice.call(args));
      };
    };

    Model.prototype.addConstant = function(text, latex, value) {
      this.constants.push({
        text: text,
        latex: latex,
        value: value
      });
      return "con" + (this.constants.length - 1);
    };

    Model.prototype.addGame = function(expression) {
      return this.expressions.push(expression);
    };

    Model.prototype.toLaTeX = function(expression, precedence) {
      var args, expr, func, head, i, pattern, prec, result, wrap;
      if (typeof precedence === 'undefined') {
        precedence = 'top';
      }
      wrap = function(result) {
        if (precedence === 'top') {
          return '\\(' + result + '\\)';
        } else {
          return result;
        }
      };
      if (!(expression instanceof Array)) {
        if (indexOf.call((function() {
          var j, ref, results;
          results = [];
          for (i = j = 0, ref = this.constants.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            results.push("con" + i);
          }
          return results;
        }).call(this), expression) >= 0) {
          expression = this.constants[expression.slice(3)].latex;
        }
        return wrap(expression);
      }
      expression = expression.slice();
      head = expression.shift();
      pattern = null;
      if (head === 'And') {
        pattern = "A \\wedge B";
        prec = -990;
      }
      if (head === 'Or') {
        pattern = "A \\vee B";
        prec = -1000;
      }
      if (head === 'Not') {
        pattern = "\\neg A";
        prec = -900;
      }
      if (head === 'Implies') {
        pattern = "A \\Rightarrow B";
        prec = -1005;
      }
      if (head === 'Iff') {
        pattern = "A \\Leftrightarrow B";
        prec = -1010;
      }
      if (head === 'Forall') {
        pattern = "\\forall A, B";
        prec = -950;
      }
      if (head === 'Exists') {
        pattern = "\\exists A, B";
        prec = -950;
      }
      if (pattern != null) {
        func = function(a, b) {
          return pattern.replace('A', a).replace('B', b);
        };
      } else if (head.slice(0, 2) === 'op') {
        func = this.operators[head.slice(2)].latex;
        prec = this.operators[head.slice(2)].precedence;
      } else {
        func = function() {
          return '???';
        };
      }
      args = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = expression.length; j < len; j++) {
          expr = expression[j];
          results.push(this.toLaTeX(expr, prec));
        }
        return results;
      }).call(this);
      result = func.apply(null, args);
      if (typeof precedence === 'number' && prec < precedence) {
        result = "\\left(" + result + "\\right)";
      }
      return wrap(result);
    };

    Model.prototype.interpretations = function() {
      var constant, j, k, latex, len, len1, operator, ref, ref1, result;
      result = '<table border=0 align=center style="border-spacing: 20px; border-collapse: separate;">';
      result += "<tr> <td align=right>UD:</td> <td>" + this.name + "</td></tr>";
      ref = this.operators;
      for (j = 0, len = ref.length; j < len; j++) {
        operator = ref[j];
        latex = operator.latex.apply(operator, operator.exampleArgs);
        result += "<tr> <td align=right>\\(" + latex + "\\)</td> <td>" + operator.explanation + "</td></tr>";
      }
      ref1 = this.constants;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        constant = ref1[k];
        result += "<tr> <td align=right>\\(" + constant.latex + "\\)</td> <td>" + constant.value + ", which you type in as " + constant.text + "</td></tr>";
      }
      return result + '</table>';
    };

    Model.prototype.gameLaTeX = function(index) {
      return this.toLaTeX(this.expressions[index]);
    };

    Model.prototype.gameList = function() {
      var game, here, index, j, len, ref, result;
      result = '<ol>';
      here = thisPageURL();
      ref = this.expressions;
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        game = ref[index];
        result += "<li><a href='" + here + "&game=" + index + "' >" + (this.gameLaTeX(index)) + "</a></li>";
      }
      return result + '</ol>';
    };

    Model.prototype.gameInputs = function(index) {
      var getVars, intro, j, len, player, result, seenExists, seenForall, variable, variables;
      seenForall = seenExists = false;
      getVars = function(expression) {
        var ref;
        if (!(expression instanceof Array) || ((ref = expression[0]) !== 'Forall' && ref !== 'Exists')) {
          return [];
        }
        if (expression[0] === 'Forall') {
          seenForall = true;
        } else {
          seenExists = true;
        }
        return [
          {
            name: expression[1],
            quantifier: expression[0]
          }
        ].concat(getVars(expression[2]));
      };
      variables = getVars(this.expressions[index]);
      result = '<form class="form-horizontal">';
      for (index = j = 0, len = variables.length; j < len; index = ++j) {
        variable = variables[index];
        intro = variables.length > 1 ? index === 0 ? 'First, ' : 'Then, ' : 'Only one step: ';
        player = variable.quantifier === 'Forall' ? 'Challenger' : 'Defender';
        result += "<div class='form-group'> <label for='bound_var_" + variable.name + "' class='col-sm-6 control-label' >" + intro + " the " + player + " chooses the value of " + variable.name + ":</label> <div class='col-sm-4'> <input type=text value='' class='form-control player-input' data-player='" + player + "' id='bound_var_" + variable.name + "' size=15> </div> </div>";
      }
      if (!seenForall) {
        if (!seenExists) {
          result += '<div class="col-sm-12 control-label" style="text-align: center;"> Neither player makes a play in this game; it has no quantifiers. </div>';
        } else {
          result += '<div class="col-sm-12 control-label" style="text-align: center;"> The Challenger does not play in this game. </div>';
        }
      } else if (!seenExists) {
        result += '<div class="col-sm-12 control-label" style="text-align: center;"> The Defender does not play in this game. </div>';
      }
      return result + '</form>';
    };

    Model.prototype.evaluate = function(gameIndex) {
      var getVar, recur;
      getVar = function(name) {
        var input;
        input = document.getElementById("bound_var_" + name);
        return input != null ? input.value : void 0;
      };
      recur = (function(_this) {
        return function(expr) {
          var head, i, ref, rest, subexpr, tryvar;
          if (!(expr instanceof Array)) {
            if (indexOf.call((function() {
              var j, ref, results;
              results = [];
              for (i = j = 0, ref = this.constants.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                results.push("con" + i);
              }
              return results;
            }).call(_this), expr) >= 0) {
              return _this.constants[expr.slice(3)].value;
            }
            if (tryvar = getVar(expr)) {
              return tryvar;
            }
            if (_this.universe(expr)) {
              return expr;
            }
            throw "Invalid value: " + expr;
          }
          expr = expr.slice();
          head = expr.shift();
          rest = (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = expr.length; j < len; j++) {
              subexpr = expr[j];
              results.push(recur(subexpr));
            }
            return results;
          })();
          switch (head) {
            case 'And':
              return rest[0] && rest[1];
            case 'Or':
              return rest[0] || rest[1];
            case 'Not':
              return !rest[0];
            case 'Implies':
              return !rest[0] || rest[1];
            case 'Iff':
              return rest[0] === rest[1];
            case 'Forall':
            case 'Exists':
              return rest[1];
            default:
              if (head.slice(0, 2) !== 'op') {
                throw "Unknown operator: " + head;
              }
          }
          return (ref = _this.operators[head.slice(2)]) != null ? typeof ref.evaluate === "function" ? ref.evaluate.apply(ref, rest) : void 0 : void 0;
        };
      })(this);
      return recur(this.expressions[gameIndex]);
    };

    Model.prototype.gameResults = function(index) {
      return "<form class='form-horizontal'> <div class='form-group'> <label for='judge_button' class='col-sm-6 control-label' >After all plays have been made:</label> <div class='col-sm-6'> <button type='submit' id='judge_button' class='btn btn-default' >Judge winner</button> </div> </div> </form> <div class='alert alert-warning' id='game_result' role='alert' style='text-align: center;'> (The result of the game will be shown here.) </div>";
    };

    return Model;

  })();

  $(function() {
    var fillMe, game, gameResult, halfQS, halves, here, index, item, j, judgeButton, len, mark, model, newBody, param, params, queryString, ref, ref1, withoutQS;
    here = thisPageURL();
    if (fillMe = document.getElementById('modelList')) {
      fillMe.innerHTML = '<ul></ul>';
      ref = Model.prototype.allModels;
      for (index in ref) {
        model = ref[index];
        item = document.createElement('li');
        item.innerHTML = "<a href='" + here + "?model=" + index + "' >" + model.name + "</a> (" + model.description + ")";
        fillMe.childNodes[0].appendChild(item);
      }
    }
    if (!((mark = here.indexOf('?')) > -1)) {
      return;
    }
    queryString = here.substring(mark + 1);
    withoutQS = here.substring(0, mark);
    params = {};
    ref1 = queryString.split('&');
    for (j = 0, len = ref1.length; j < len; j++) {
      param = ref1[j];
      halves = param.split('=');
      params[halves[0]] = halves[1];
    }
    model = params.model, game = params.game;
    if (model == null) {
      return;
    }
    halfQS = withoutQS + "?model=" + model;
    model = Model.prototype.allModels[model];
    if (game == null) {
      newBody = "<div class='container'> <div class='jumbotron'> <h2>Model: " + model.name + "</h2> <p>(" + model.description + ")</p> <h2>Games listed below.</h2> <p><a href='" + withoutQS + "'>&larr; Return to main page</a></p> </div> <div class='panel panel-info'> <div class='panel-heading'> <h3>Interpretations</h3> </div> <div class='panel-body'> " + (model.interpretations()) + " </div> </div> <div class='panel panel-success'> <div class='panel-heading'> <h3>Games on this model</h3> </div> <div class='panel-body'> " + (model.gameList()) + " </div> </div> </div>";
    } else {
      newBody = "<div class='container'> <div class='jumbotron'> <h2>Model: " + model.name + "</h2> <h2>Game: " + (model.gameLaTeX(game)) + "</h2> <p>(" + model.description + ")</p> <p><a href='" + halfQS + "'>&larr; Return to game list for this model</a></p> <p><a href='" + withoutQS + "'>&larr; Return to main page</a></p> </div> <div class='panel panel-info'> <div class='panel-heading'> <h3>Interpretations</h3> </div> <div class='panel-body'> " + (model.interpretations()) + " </div> </div> <div class='panel panel-success'> <div class='panel-heading'> <h3>Game Play</h3> </div> <div class='panel-body'> " + (model.gameInputs(game)) + " </div> </div> <div class='panel panel-warning'> <div class='panel-heading'> <h3>Game Results</h3> </div> <div class='panel-body'> " + (model.gameResults(game)) + " </div> </div> </div>";
    }
    document.body.innerHTML = newBody;
    judgeButton = document.getElementById('judge_button');
    gameResult = document.getElementById('game_result');
    if ((judgeButton != null) && (gameResult != null)) {
      return ($(judgeButton)).on('click', function() {
        var e, input, inputs, k, len1, other, player, varname;
        try {
          inputs = document.getElementsByClassName('player-input');
          for (k = 0, len1 = inputs.length; k < len1; k++) {
            input = inputs[k];
            if (!model.universe(input.value)) {
              varname = input.id.slice(10);
              player = input.getAttribute('data-player');
              other = player === 'Challenger' ? 'Defender' : 'Challenger';
              gameResult.innerHTML = "<h4>The " + player + "'s input for the variable " + varname + " was invalid, so the " + other + " wins.</h4>";
              return false;
            }
          }
          gameResult.innerHTML = model.evaluate(game) ? '<h4>The expression is true. The Defender wins!</h4>' : '<h4>The expression is false. The Challenger wins!</h4>';
        } catch (_error) {
          e = _error;
          console.log(e);
        }
        return false;
      });
    }
  });

  thisPageURL = function() {
    return window.location.href.replace("'", escape("'")).replace("<", escape("<")).replace(">", escape(">"));
  };

}).call(this);
