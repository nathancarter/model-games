// Generated by CoffeeScript 1.8.0
(function() {
  var Begins, CReals, Caf, Close, Div, Ends, Equal, Female, Friends, GT, LT, Less, Male, Minus, NatEq, Naturals, One, Pi, Plus, REQ, Reals, Times, WordA, WordJ, Words;

  Words = new Model('Words', 'words made from letters in the Roman alphabet, a to z', function(x) {
    return /^[a-z]+$/.test(x);
  });

  Begins = Words.addOperator((function(a, b) {
    return "begins(" + a + "," + b + ")";
  }), (function(a, b) {
    return b.length === 1 && a.charAt(0) === b.charAt(0);
  }), null, "the word \\(x\\) begins with the letter \\(y\\)");

  Ends = Words.addOperator((function(a, b) {
    return "ends(" + a + "," + b + ")";
  }), (function(a, b) {
    return b.length === 1 && a.charAt(a.length - 1) === b.charAt(0);
  }), null, "the word \\(x\\) ends with the letter \\(y\\)");

  One = Words.addOperator((function(a) {
    return "one(" + a + ")";
  }), (function(a) {
    return a.length === 1;
  }), null, "\\(x\\) is a one-letter word");

  WordJ = Words.addConstant('J', 'J', 'job');

  WordA = Words.addConstant('A', 'A', 'a');

  Words.addGame(Forall('x', Begins(WordJ, 'x')));

  Words.addGame(Exists('x', Begins(WordJ, 'x')));

  Words.addGame(Forall('x', Ends('x', WordA)));

  Words.addGame(Exists('x', Ends('x', WordA)));

  Words.addGame(Forall('x', Forall('y', And(Begins(WordJ, 'x'), Ends(WordJ, 'y')))));

  Words.addGame(Exists('x', Exists('y', And(Begins(WordJ, 'x'), Ends(WordJ, 'y')))));

  Words.addGame(Forall('x', Exists('y', Ends('x', 'y'))));

  Words.addGame(Exists('x', Forall('y', Ends('x', 'y'))));

  Words.addGame(Forall('x', Forall('y', Exists('z', And(Begins('z', 'x'), Ends('z', 'y'))))));

  Words.addGame(Forall('x', Forall('y', Exists('z', Implies(And(One('x'), One('y')), And(Begins('z', 'x'), Ends('z', 'y')))))));

  Naturals = new Model('The natural numbers', 'all natural numbers: 0, 1, 2, 3, etc...', function(x) {
    return /^[0-9]+$/.test(x);
  });

  Less = Naturals.addOperator((function(a, b) {
    return "" + a + " < " + b;
  }), (function(a, b) {
    return parseInt(a) < parseInt(b);
  }), null, "\\(x\\) is less than \\(y\\)");

  NatEq = Naturals.addOperator((function(a, b) {
    return "" + a + " = " + b;
  }), (function(a, b) {
    return parseInt(a) === parseInt(b);
  }), null, "ordinary equality of natural numbers");

  Naturals.addGame(Less(0, 1));

  Naturals.addGame(Less(2, 0));

  Naturals.addGame(Forall('x', Exists('y', Less('x', 'y'))));

  Naturals.addGame(Forall('x', Or(NatEq('x', 0), Less(0, 'x'))));

  Naturals.addGame(Exists('x', Exists('y', And(Less('x', 'y'), Less('y', 1)))));

  Naturals.addGame(Exists('x', Forall('y', And(NatEq('x', 2), Less('x', 'y')))));

  Naturals.addGame(Exists('x', Forall('y', And(NatEq('x', 2), Less('x', 'y')))));

  Reals = new Model('The real numbers', 'all real numbers, with simple algebraic operations', function(x) {
    return /^[+-]?([0-9]+\.?|[0-9]*\.[0-9]+)$/.test(x);
  });

  Plus = Reals.addOperator((function(a, b) {
    return "" + a + " + " + b;
  }), (function(a, b) {
    return parseFloat(a) + parseFloat(b);
  }), 5, "ordinary addition");

  Minus = Reals.addOperator((function(a, b) {
    return "" + a + " - " + b;
  }), (function(a, b) {
    return parseFloat(a) - parseFloat(b);
  }), 5, "ordinary subtraction");

  Times = Reals.addOperator((function(a, b) {
    return "" + a + " \\times " + b;
  }), (function(a, b) {
    return parseFloat(a) * parseFloat(b);
  }), 10, "ordinary multiplication");

  Div = Reals.addOperator((function(a, b) {
    return "\\frac{" + a + "}{" + b + "}";
  }), (function(a, b) {
    return parseFloat(a) / parseFloat(b);
  }), 10, "ordinary division");

  GT = Reals.addOperator((function(a, b) {
    return "" + a + " > " + b;
  }), (function(a, b) {
    return parseFloat(a) > parseFloat(b);
  }), 1, "\\(x\\) is greater than \\(y\\)");

  LT = Reals.addOperator((function(a, b) {
    return "" + a + " < " + b;
  }), (function(a, b) {
    return parseFloat(a) > parseFloat(b);
  }), 1, "\\(x\\) is less than \\(y\\)");

  REQ = Reals.addOperator((function(a, b) {
    return "" + a + " = " + b;
  }), (function(a, b) {
    return parseFloat(a) === parseFloat(b);
  }), 1, "ordinary equality of real numbers");

  Pi = Reals.addConstant('pi', '\\pi', Math.PI);

  Reals.addGame(LT(0, 1));

  Reals.addGame(Exists('x', LT(0, Times('x', 'x'))));

  Reals.addGame(Forall('x', LT('x', Plus('x', 'x'))));

  Reals.addGame(Exists('x', Forall('y', REQ(Plus('x', 'x'), 1))));

  Reals.addGame(Forall('x', Exists('y', REQ(Times('x', 'y'), 1))));

  Reals.addGame(Forall('x', Exists('y', REQ(Plus('x', 'y'), 0))));

  Reals.addGame(Forall('x', Forall('y', Exists('w', REQ(Times('x', 'y'), 'w')))));

  Reals.addGame(Forall('x', Forall('y', Exists('w', REQ('x', Times('y', 'w'))))));

  Reals.addGame(Forall('x', Forall('y', Exists('w', Implies(Not(REQ('x', 0)), REQ(Plus(Times('x', 'w'), 'y'), 0))))));

  CReals = new Model('The real numbers', 'all real numbers, with ideas related to calculus', function(x) {
    return /^[+-]?([0-9]+\.?|[0-9]*\.[0-9]+)$/.test(x);
  });

  Times = CReals.addOperator((function(a, b) {
    return "" + a + " \\times " + b;
  }), (function(a, b) {
    return parseFloat(a) * parseFloat(b);
  }), 10, "ordinary multiplication");

  LT = CReals.addOperator((function(a, b) {
    return "" + a + " < " + b;
  }), (function(a, b) {
    return parseFloat(a) > parseFloat(b);
  }), 1, "\\(x\\) is less than \\(y\\)");

  REQ = CReals.addOperator((function(a, b) {
    return "" + a + " = " + b;
  }), (function(a, b) {
    return parseFloat(a) === parseFloat(b);
  }), 1, "ordinary equality of real numbers");

  Close = CReals.addOperator((function(a, b, d) {
    return "close(" + a + "," + b + "," + d + ")";
  }), (function(a, b, d) {
    a = parseFloat(a);
    b = parseFloat(b);
    d = parseFloat(d);
    return Math.abs(a - b) < d;
  }), null, "the distance on the number line between \\(x\\) and \\(y\\) is less than \\(z\\)");

  CReals.addGame(Forall('x', Exists('y', Close('x', 'y', 2))));

  CReals.addGame(Forall('x', Exists('y', And(Not(REQ('x', 'y')), Close('x', 'y', 2)))));

  CReals.addGame(Exists('x', Exists('y', And(Not(REQ('x', 'y')), REQ(Times('x', 'x'), Times('y', 'y'))))));

  CReals.addGame(Exists('x', Close(-1, Times('x', 'x'), 1)));

  CReals.addGame(Forall('x', Close(1, Times('x', 'x'), 2)));

  CReals.addGame(Forall('e', Exists('d', Forall('x', Implies(LT(0, 'e'), And(LT(0, 'd'), Implies(Close('x', 0, 'd'), Close(Times('x', 'x'), 0, 'e'))))))));

  Friends = new Model('A group of friends', 'five friends, and who considers whom to be a friend', function(x) {
    return x === 'Augustus' || x === 'Beatriz' || x === 'Cyrano' || x === 'Dauphine' || x === 'Englebert';
  });

  Male = Friends.addOperator((function(a) {
    return "male(" + a + ")";
  }), (function(a) {
    return a === 'Augustus' || a === 'Cyrano' || a === 'Englebert';
  }), null, "\\(x\\) is male (one of Augustus, Cyrano, or Englebert");

  Female = Friends.addOperator((function(a) {
    return "female(" + a + ")";
  }), (function(a) {
    return a === 'Beatriz' || a === 'Dauphine';
  }), null, "\\(x\\) is female (one of Beatriz or Dauphine)");

  Caf = Friends.addOperator((function(a, b) {
    return "caf(" + a + "," + b + ")";
  }), (function(a, b) {
    return {
      Augustus: {
        Cyrano: 0
      },
      Beatriz: {
        Cyrano: 0
      },
      Cyrano: {
        Beatriz: 0,
        Englebert: 0
      },
      Dauphine: {
        Cyrano: 0
      },
      Englebert: {
        Augustus: 0,
        Beatriz: 0
      }
    }[a].hasOwnProperty(b);
  }), null, "\\(x\\) considers \\(y\\) a friend, as shown in the graph<br><img src='graph.png'>");

  Equal = Friends.addOperator((function(a, b) {
    return "" + a + " = " + b;
  }), (function(a, b) {
    return a === b;
  }), null, "\\(x\\) is equal to \\(y\\)");

  Friends.addGame(Forall('x', Exists('y', Caf('x', 'y'))));

  Friends.addGame(Forall('x', Exists('y', Caf('y', 'x'))));

  Friends.addGame(Exists('x', Forall('y', Caf('x', 'y'))));

  Friends.addGame(Forall('x', Or(Male('x'), Female('x'))));

  Friends.addGame(Forall('x', Exists('y', Implies(Male('x'), Caf('y', 'x')))));

  Friends.addGame(Exists('x', Exists('y', Exists('z', And(And(Caf('x', 'y'), Caf('y', 'z')), Caf('z', 'x'))))));

  Friends.addGame(Exists('x', Exists('y', And(Caf('x', 'y'), Caf('y', 'x')))));

}).call(this);
